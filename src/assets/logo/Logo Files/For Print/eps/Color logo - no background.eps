%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2378 798
%%HiResBoundingBox: 0 0 2377.9199 798
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2377.9199 798 re
W
q
[0.24 0 0 -0.24 0 798] cm
q
0 0 9908.333 3322.5735 re
W*
q
[26.570669 0 0 26.571581 265.77182 318.85898] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 m
103 0 l
103 102 l
0 102 l
0 0 l
h
4 4 m
4 98 l
99 98 l
99 4 l
4 4 l
h
f
Q
q
[46.897297 0 0 46.898903 543.01532 -153.319138] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
3.72 60 m
3.72 18 l
14.58 18 l
31.860001 40.200001 l
31.860001 18 l
43.380001 18 l
43.380001 60 l
33.18 60 l
15.24 36.959999 l
15.24 60 l
3.719999 60 l
3.72 60 l
h
f
Q
q
[69.998398 0 0 70.000793 3255.0415 -557.33862] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
22.851999 12.148 m
27.52 12.148 l
27.52 40 l
22.285601 40 l
8.613601 18.75 l
8.613601 40 l
3.984701 40 l
3.984701 12.148001 l
9.160501 12.148001 l
22.851501 33.261002 l
22.851501 12.148001 l
22.851999 12.148 l
h
49.569908 25.371 m
52.79261 26.230381 54.96051 28.3983 54.96051 32.3241 c
54.96051 36.874901 52.011311 39.999901 46.640209 39.999901 c
35.488209 39.999901 l
35.488209 12.147901 l
44.218708 12.147901 l
49.726509 12.147901 52.949207 15.097101 52.949207 19.647902 c
52.949207 22.206501 51.796906 24.296303 49.570309 25.370602 c
49.569908 25.371 l
h
44.237907 16.094 m
39.999607 16.094 l
39.999607 23.925999 l
44.706608 23.925999 l
47.206608 23.925999 48.612907 22.148699 48.612907 19.941599 c
48.612907 17.754099 47.089508 16.093899 44.237907 16.093899 c
44.237907 16.094 l
h
45.800907 35.9375 m
48.965008 35.9375 50.429806 34.003899 50.429806 31.816401 c
50.429806 29.5312 48.925907 27.617201 45.625107 27.617201 c
40.000107 27.617201 l
40.000107 35.9375 l
45.800907 35.9375 l
h
69.765938 40.37109 m
63.867538 40.37109 59.452938 37.55859 58.554939 32.636688 c
63.359638 31.523388 l
63.867447 34.726486 66.504135 36.484287 69.941635 36.484287 c
72.656433 36.484287 75.117432 35.331985 75.078339 32.402287 c
75.039276 29.355387 71.660339 28.476486 68.008041 27.441387 c
63.789242 26.210888 59.453342 24.804688 59.453342 19.687487 c
59.453342 14.492187 63.711143 11.757787 69.004143 11.757787 c
73.88694 11.757787 78.515839 13.808587 79.590141 18.808586 c
75.078438 19.941385 l
74.453438 16.972586 72.148735 15.664085 69.23864 15.664085 c
66.640938 15.664085 64.180038 16.777386 64.180038 19.609386 c
64.180038 22.187487 67.129242 22.988287 70.508141 23.925787 c
74.86364 25.136686 79.902641 26.621086 79.902641 32.207085 c
79.902641 37.968784 75.078438 40.371185 69.76564 40.371185 c
69.765938 40.37109 l
h
f
Q
q
[26.570669 0 0 26.571581 3491.9824 2518.4543] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
11.26 20 m
2.980001 7.44 l
2.940001 7.44 l
2.940001 20 l
1.580001 20 l
1.580001 5.6 l
3.12 5.6 l
11.440001 18.18 l
11.480001 18.18 l
11.480001 5.6 l
12.84 5.6 l
12.84 20 l
11.26 20 l
h
16.139999 20 m
14.74 20 l
20.4 5.6 l
21.939999 5.6 l
27.459999 20 l
26.059999 20 l
24.4 15.48 l
17.84 15.48 l
16.139999 20 l
h
21.120001 6.76 m
18.300001 14.32 l
23.940001 14.32 l
21.120001 6.76 l
h
28.1 6.76 m
28.1 5.6 l
38.580002 5.6 l
38.580002 6.76 l
34.02 6.76 l
34.02 20 l
32.66 20 l
32.66 6.76 l
28.1 6.76 l
h
42.360001 20 m
41 20 l
41 5.6 l
42.360001 5.6 l
42.360001 20 l
h
45.52 12.82 m
45.5 8.62 47.860001 5.22 52.16 5.22 c
56.66 5.22 58.939999 8.6 58.939999 12.82 c
58.939999 16.959999 56.66 20.379999 52.219997 20.379999 c
47.779995 20.379999 45.519997 16.959999 45.519997 12.82 c
45.52 12.82 l
h
52.240002 19.219999 m
55.980003 19.219999 57.580002 16.18 57.580002 12.82 c
57.580002 8.82 55.52 6.38 52.200001 6.38 c
48.5 6.38 46.880001 9.48 46.880001 12.82 c
46.880001 16.219999 48.48 19.219999 52.240002 19.219999 c
h
71.279999 20 m
63 7.44 l
62.959999 7.44 l
62.959999 20 l
61.599998 20 l
61.599998 5.6 l
63.139999 5.6 l
71.459999 18.18 l
71.5 18.18 l
71.5 5.6 l
72.860001 5.6 l
72.860001 20 l
71.279999 20 l
h
76.160004 20 m
74.760002 20 l
80.419998 5.6 l
81.959999 5.6 l
87.479996 20 l
86.079994 20 l
84.419991 15.48 l
77.859993 15.48 l
76.160004 20 l
h
81.139999 6.76 m
78.32 14.32 l
83.959999 14.32 l
81.139999 6.76 l
h
98.5 20 m
89.419998 20 l
89.419998 5.6 l
90.779999 5.6 l
90.779999 18.84 l
98.5 18.84 l
98.5 20 l
h
107.459999 13.12 m
107.459999 18.84 l
110.919998 18.84 l
113.919998 18.84 115.32 18.440001 115.32 15.940001 c
115.32 13.56 113.639999 13.120001 111.080002 13.120001 c
107.459999 13.120001 l
107.459999 13.12 l
h
107.459999 6.76 m
107.459999 11.96 l
110.900002 11.96 l
113.740005 11.96 114.660004 10.96 114.660004 9.22 c
114.660004 7.42 113.580002 6.76 110.600006 6.76 c
107.460007 6.76 l
107.459999 6.76 l
h
111.980003 20 m
106.100006 20 l
106.100006 5.6 l
111.300003 5.6 l
114.68 5.6 116.020004 7.06 116.020004 9.22 c
116.020004 11.22 114.880005 12.120001 113.720001 12.32 c
113.720001 12.36 l
115.700005 12.66 116.68 14.04 116.68 15.94 c
116.68 18.939999 114.720001 20 111.980003 20 c
h
118.879997 12.82 m
118.860001 8.62 121.219994 5.22 125.519997 5.22 c
130.019989 5.22 132.300003 8.6 132.300003 12.82 c
132.300003 16.959999 130.020004 20.379999 125.580002 20.379999 c
121.139999 20.379999 118.880005 16.959999 118.880005 12.82 c
118.879997 12.82 l
h
125.599998 19.219999 m
129.339996 19.219999 130.940002 16.18 130.940002 12.82 c
130.940002 8.82 128.880005 6.38 125.560005 6.38 c
121.860008 6.38 120.240005 9.48 120.240005 12.82 c
120.240005 16.219999 121.840004 19.219999 125.600006 19.219999 c
125.599998 19.219999 l
h
134.440002 12.82 m
134.419998 8.62 136.779999 5.22 141.080002 5.22 c
145.580002 5.22 147.860001 8.6 147.860001 12.82 c
147.860001 16.959999 145.580002 20.379999 141.139999 20.379999 c
136.699997 20.379999 134.440002 16.959999 134.440002 12.82 c
h
141.160004 19.219999 m
144.900009 19.219999 146.5 16.18 146.5 12.82 c
146.5 8.82 144.440002 6.38 141.119995 6.38 c
137.419998 6.38 135.799988 9.48 135.799988 12.82 c
135.799988 16.219999 137.399994 19.219999 141.159988 19.219999 c
141.160004 19.219999 l
h
152 20 m
150.639999 20 l
150.639999 5.6 l
152 5.6 l
152 13.06 l
159.380005 5.6 l
160.919998 5.6 l
155.240005 11.34 l
161.919998 20 l
160.259995 20 l
154.259995 12.18 l
152 14.440001 l
152 20 l
h
168.7 15.7 m
170.02 15.7 l
170.24001 18.279999 171.96001 19.219999 174.16 19.219999 c
176.74001 19.219999 177.82001 17.82 177.82001 16.24 c
177.82001 11.78 169.04001 14.74 169.04001 9.08 c
169.04001 7.08 170.70001 5.22 173.92001 5.22 c
177.16002 5.22 178.78001 7.18 178.76001 9.520001 c
177.46001 9.520001 l
177.46001 7.320001 175.76001 6.38 173.92001 6.38 c
171.16002 6.38 170.16002 8.08 170.40001 9.56 c
171.02 13.280001 179.18001 10.6 179.18001 16.18 c
179.18001 18.82 177.24001 20.380001 173.92001 20.380001 c
170.92001 20.380001 168.70001 18.820002 168.70001 15.700001 c
168.7 15.7 l
h
180.38 6.76 m
180.38 5.6 l
190.86 5.6 l
190.86 6.76 l
186.3 6.76 l
186.3 20 l
184.94 20 l
184.94 6.76 l
180.38 6.76 l
h
192.24001 12.82 m
192.22 8.62 194.58 5.22 198.88 5.22 c
203.38 5.22 205.66 8.6 205.66 12.82 c
205.66 16.959999 203.38 20.379999 198.94 20.379999 c
194.5 20.379999 192.24001 16.959999 192.24001 12.82 c
h
198.96001 19.219999 m
202.70001 19.219999 204.3 16.18 204.3 12.82 c
204.3 8.82 202.24001 6.38 198.92 6.38 c
195.22 6.38 193.59999 9.48 193.59999 12.82 c
193.59999 16.219999 195.2 19.219999 198.95999 19.219999 c
198.96001 19.219999 l
h
209.7 12.3 m
213.94 12.3 l
215.96001 12.3 217.52 11.46 217.52 9.440001 c
217.52 7.280001 215.84001 6.76 214.02 6.76 c
209.7 6.76 l
209.7 12.3 l
h
213.98 13.46 m
209.7 13.46 l
209.7 20 l
208.34 20 l
208.34 5.6 l
213.98 5.6 l
217.14 5.6 218.87999 6.72 218.87999 9.38 c
218.87999 11.2 218.2 12.16 216.53999 12.9 c
218.23999 13.48 218.34 15.28 218.37999 16.799999 c
218.43999 18.98 218.62 19.58 218.98 19.859999 c
218.98 19.999998 l
217.48 19.999998 l
216.92 19.019999 217.06 16.319998 216.84 15.219998 c
216.51999 13.659998 215.34 13.459998 213.98 13.459998 c
213.98 13.46 l
h
231.48 20 m
221.7 20 l
221.7 5.6 l
231.28 5.6 l
231.28 6.76 l
223.06 6.76 l
223.06 11.96 l
230.48 11.96 l
230.48 13.12 l
223.06 13.12 l
223.06 18.84 l
231.48 18.84 l
231.48 20 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
